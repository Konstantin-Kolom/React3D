import * as THREE from 'three';
import { useRef, useState } from 'react';
import { easing } from 'maath';
import { Canvas, useFrame } from '@react-three/fiber';
import {
  useGLTF,
  Center,
  Caustics,
  Environment,
  Lightformer,
  RandomizedLight,
  PerformanceMonitor,
  AccumulativeShadows,
  MeshTransmissionMaterial,
} from '@react-three/drei';
import { Overlay } from './Overlay';

const innerMaterial = new THREE.MeshStandardMaterial({
  transparent: true,
  opacity: 1,
  color: 'black',
  roughness: 0,
  side: THREE.FrontSide,
  blending: THREE.AdditiveBlending,
  polygonOffset: true,
  polygonOffsetFactor: 1,
  envMapIntensity: 2,
});

const HeroWeb = () => {
  const [perfSucks, degrade] = useState(false);
  return (
    <>
      <Canvas
        shadows
        dpr={[1, perfSucks ? 1.5 : 2]}
        eventSource={document.getElementById('root')}
        eventPrefix="client"
        camera={{ position: [20, 0.9, 20], fov: 26 }}
      >
        {/** PerfMon will detect performance issues */}
        <PerformanceMonitor onDecline={() => degrade(true)} />
        <color attach="background" args={['#f0f0f0']} />
        <group position={[0, -0.5, 0]} rotation={[0, -0.75, 0]}>
          <Scene />
          <AccumulativeShadows
            frames={100}
            alphaTest={0.85}
            opacity={0.8}
            color="red"
            scale={20}
            position={[0, -0.005, 0]}
          >
            <RandomizedLight
              amount={8}
              radius={6}
              ambient={0.5}
              intensity={1}
              position={[-1.5, 2.5, -2.5]}
              bias={0.001}
            />
          </AccumulativeShadows>
        </group>
        <Env perfSucks={perfSucks} />
      </Canvas>
      <Overlay />
    </>
  );
};

/*
Kit-bash auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.3 scene.glb --transform
Licenses: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Authors:
  matousekfoto (https://sketchfab.com/matousekfoto) (Fruit Cake Slice)
    https://sketchfab.com/3d-models/fruit-cake-slice-7b9a33386eab4dd986aa0980054ead3c
  Felix Yadomi (https://sketchfab.com/felixyadomi) (Cute milkshake)
    https://sketchfab.com/3d-models/cute-milkshake-3ba52a41b4b248df953684861d9e7a20
  Second Studio (https://sketchfab.com/kayaaku) (Dry flower)
    https://sketchfab.com/3d-models/dry-flower-ff0005d6eb4d4077bd08b8992299c45c
  CDcruz (https://sketchfab.com/cdcruz) (Ikea - Pokal Glass Cups)
    https://sketchfab.com/3d-models/ikea-pokal-glass-cups-21837e54a14346aa900e1ae719779b86
*/
function Scene(props) {
  const { nodes, materials } = useGLTF(process.env.PUBLIC_URL + '/ferarri/scene.gltf');
  return (
    <group {...props} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]} scale={1.05}>
        <mesh geometry={nodes.Object_2.geometry} material={materials.material} />
        <mesh geometry={nodes.Object_3.geometry} material={materials.Ferrari_F50_1995_by_Alex_Ka} />
        <mesh geometry={nodes.Object_4.geometry} material={materials.blackaluminium} />
        <mesh geometry={nodes.Object_5.geometry} material={materials.blackchrome} />
        <mesh geometry={nodes.Object_6.geometry} material={materials.blackmatte} />
        <mesh geometry={nodes.Object_7.geometry} material={materials.blackplastic} />
        <mesh geometry={nodes.Object_8.geometry} material={materials.bottom} />
        <mesh geometry={nodes.Object_9.geometry} material={materials.brakedisc} />
        <mesh geometry={nodes.Object_10.geometry} material={materials.brakelight} />
        <mesh geometry={nodes.Object_11.geometry} material={materials.chrome} />
        <mesh geometry={nodes.Object_12.geometry} material={materials.designo_plastic} />
        <mesh geometry={nodes.Object_13.geometry} material={materials.door_lock} />
        <mesh geometry={nodes.Object_14.geometry} material={materials.emblem_hood} />
        <mesh geometry={nodes.Object_15.geometry} material={materials.engine_glass} />
        <mesh geometry={nodes.Object_16.geometry} material={materials.engine_rear} />
        <mesh geometry={nodes.Object_17.geometry} material={materials.engine_up} />
        <mesh geometry={nodes.Object_18.geometry} material={materials.exhaust_bronze} />
        <mesh geometry={nodes.Object_19.geometry} material={materials.exhaust_chrome} />
        <mesh geometry={nodes.Object_20.geometry} material={materials.exhaust_hole} />
        <mesh geometry={nodes.Object_21.geometry} material={materials.ferrari_support_logo} />
        <mesh geometry={nodes.Object_22.geometry} material={materials.gril_front} />
        <mesh geometry={nodes.Object_23.geometry} material={materials.grill_front_side} />
        <mesh geometry={nodes.Object_24.geometry} material={materials.grill_rear} />
        <mesh geometry={nodes.Object_25.geometry} material={materials.headlight1} />
        <mesh geometry={nodes.Object_26.geometry} material={materials.headlight2} />
        <mesh geometry={nodes.Object_27.geometry} material={materials.headlightglass} />
        <mesh geometry={nodes.Object_28.geometry} material={materials.horse} />
        <mesh geometry={nodes.Object_29.geometry} material={materials.horse_side_logo} />
        <mesh geometry={nodes.Object_30.geometry} material={materials.interior} />
        <mesh geometry={nodes.Object_31.geometry} material={materials.italy_logo} />
        <mesh geometry={nodes.Object_32.geometry} material={materials.mirror_interior} />
        <mesh geometry={nodes.Object_33.geometry} material={materials.mirrors} />
        <mesh geometry={nodes.Object_34.geometry} material={materials.pininfarina_chrome} />
        <mesh geometry={nodes.Object_35.geometry} material={materials.plastic_front} />
        <mesh geometry={nodes.Object_36.geometry} material={materials.plastic_front_side} />
        <mesh geometry={nodes.Object_37.geometry} material={materials.plate} />
        <mesh geometry={nodes.Object_38.geometry} material={materials.plate_ferrari_logo} />
        <mesh geometry={nodes.Object_39.geometry} material={materials.radiator} />
        <mesh geometry={nodes.Object_40.geometry} material={materials.radiator_side} />
        <mesh geometry={nodes.Object_41.geometry} material={materials.material_39} />
        <mesh geometry={nodes.Object_42.geometry} material={materials.rim_emblem} />
        <mesh geometry={nodes.Object_43.geometry} material={materials.side_windo_horse_logo} />
        <mesh geometry={nodes.Object_44.geometry} material={materials.sideline_black_plastic} />
        <mesh geometry={nodes.Object_45.geometry} material={materials.suport} />
        <mesh geometry={nodes.Object_46.geometry} material={materials.suspension} />
        <mesh geometry={nodes.Object_47.geometry} material={materials.tire} />
        <mesh geometry={nodes.Object_48.geometry} material={materials.tire_side} />
        <mesh geometry={nodes.Object_49.geometry} material={materials.turnlight_front} />
        <mesh geometry={nodes.Object_50.geometry} material={materials.turnlight_side} />
        <mesh geometry={nodes.Object_51.geometry} material={materials.windo} />
      </group>
    </group>
  );
}

function Env({ perfSucks }) {
  const ref = useRef();
  useFrame((state, delta) => {
    // Animate the environment as well as the camera
    if (!perfSucks) {
      easing.damp3(
        ref.current.rotation,
        [Math.PI / 2, 0, state.clock.elapsedTime / 5 + state.pointer.x],
        0.2,
        delta,
      );
      easing.damp3(
        state.camera.position,
        [
          Math.sin(state.pointer.x / 4) * 9,
          1.25 + state.pointer.y,
          Math.cos(state.pointer.x / 4) * 9,
        ],
        0.5,
        delta,
      );
      state.camera.lookAt(0, 0, 0);
    }
  });
  // Runtime environments can be too slow on some systems, better safe than sorry with PerfMon
  return (
    <Environment
      frames={perfSucks ? 1 : Infinity}
      preset="city"
      resolution={256}
      background
      blur={0.8}
    >
      <Lightformer
        intensity={4}
        rotation-x={Math.PI / 2}
        position={[0, 5, -9]}
        scale={[10, 10, 1]}
      />
      <Lightformer
        intensity={4}
        rotation-x={Math.PI / 2}
        position={[0, 5, -9]}
        scale={[10, 10, 1]}
      />
      <group rotation={[Math.PI / 2, 1, 0]}>
        {[2, -2, 2, -4, 2, -5, 2, -9].map((x, i) => (
          <Lightformer
            key={i}
            intensity={1}
            rotation={[Math.PI / 4, 0, 0]}
            position={[x, 4, i * 4]}
            scale={[4, 1, 1]}
          />
        ))}
        <Lightformer
          intensity={0.5}
          rotation-y={Math.PI / 2}
          position={[-5, 1, -1]}
          scale={[50, 2, 1]}
        />
        <Lightformer
          intensity={0.5}
          rotation-y={Math.PI / 2}
          position={[-5, -1, -1]}
          scale={[50, 2, 1]}
        />
        <Lightformer
          intensity={0.5}
          rotation-y={-Math.PI / 2}
          position={[10, 1, 0]}
          scale={[50, 2, 1]}
        />
      </group>
      <group ref={ref}>
        <Lightformer
          intensity={5}
          form="ring"
          color="red"
          rotation-y={Math.PI / 2}
          position={[-5, 2, -1]}
          scale={[10, 10, 1]}
        />
      </group>
    </Environment>
  );
}

export default HeroWeb;
